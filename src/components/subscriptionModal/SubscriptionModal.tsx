"use client"

import { useState } from "react";
import "./SubscriptionModalStyle.css"
import { useUser } from "../../common/context/user-context";
import { subApi } from "../../common/api/subcription/api";
import ErrorToast from "../errorToast/ErrorToast";
import { useCookies } from 'next-client-cookies';

type SubscriptionModalProps = {
    withoutCloseBtn: boolean
    onClose: (e: any) => void
};

const SubscriptionModal = (props: SubscriptionModalProps) => {
    const {user, accessToken} = useUser()

    const cookies = useCookies();

    const [selected, setSelected] = useState<'month' | 'year'>('month');
    const [isLoading, setIsLoading] = useState<boolean>(false)
    const [err, setError] = useState<string | null>(null)
    const onSubscribe = () => {
        if (!user && (!email || email == "")) {
            setError("–ü–æ—á—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
            return
        }
        const subscribe = async () => {
            try {
                setIsLoading(true)
                const data = await subApi.subscribe(selected, accessToken, email)
                if (data.data.user_access_token) {
                    let expires = new Date()
                    expires.setTime(expires.getTime() + (604800 * 1000))
                    cookies.set("access_token", data.data.user_access_token, { path: '/',  expires})
                }
                window.open(data.data.redirect_link, "_self");
            } catch (err: any) {
                setError(err.response.data.message)
            } finally {
                setIsLoading(false)
            }
        };
        subscribe()
        return
    }

    const [email, setEmail] = useState<string | null>(null)
    return (
        <div className="SubscriptionModalOverlay">
            {err && (
                <ErrorToast message={err} onClose={() => setError(null)} duration={3000}></ErrorToast>
            )}
            <div className='SubscriptionModalContainer'>
                <div style={{padding: '28px'}}>
                    <div style={{display: 'flex', marginBottom: '12px', alignItems: 'center'}}>
                        <p className='SubscriptionModalTitle'>–ü–æ–¥–ø–∏—Å–∫–∞ GODZILLA SOFT</p>
                        {!props.withoutCloseBtn && (
                            <div className='SubscriptionhModalCloseContainer' onClick={props.onClose} >
                                <svg role="button" aria-hidden="false" data-icon="close" viewBox="0 0 24 24" className="AuthModalClose"><path d="M18.7 5.3a1 1 0 0 0-1.4 0L12 10.58l-5.3-5.3a1 1 0 0 0-1.4 1.42L10.58 12l-5.3 5.3a1 1 0 1 0 1.42 1.4L12 13.42l5.3 5.3a1 1 0 0 0 1.4-1.42L13.42 12l5.3-5.3a1 1 0 0 0 0-1.4Z"></path></svg>
                            </div>
                        )}
                    </div>
                    <div className="SubscriptionModalDescription">
                        <b>–ë–æ–ª—å—à–µ —Å–≤–æ–±–æ–¥—ã</b> –∏ <b>–¥–µ—Å—è—Ç–∫–∏ –∏–≥—Ä —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Steam</b>, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.
                    </div>
                    <div>
                    <div className="SubscriptionModalDescriptionPlanSelector">
                        <div
                            className={`SubscriptionModalDescriptionPlanOption ${selected === 'year' ? 'selected' : ''}`}
                            onClick={() => setSelected('year')}
                        >
                            <div className="SubscriptionModalDescriptionPlanRadioCirle">
                                {selected === 'year' && <div className="SubscriptionModalDescriptionPlanRadioDot" />}
                            </div>
                            <div className="SubscriptionModalDescriptionPlanOptionDetails">
                                <div className="SubscriptionModalDescriptionPlanOptionTitle">
                                    –ï–∂–µ–≥–æ–¥–Ω–æ <span className="SubscriptionModalDescriptionPlanOptionDiscount">-50%</span>
                                </div>
                                <div className="SubscriptionModalDescriptionPlanOptionPrice">1 500 ‚ÇΩ –≤ –≥–æ–¥</div>
                            </div>
                        </div>

                        <div
                            className={`SubscriptionModalDescriptionPlanOption ${selected === 'month' ? 'selected' : ''}`}
                            onClick={() => setSelected('month')}
                        >
                            <div className="SubscriptionModalDescriptionPlanRadioCirle">
                                {selected === 'month' && <div className="SubscriptionModalDescriptionPlanRadioDot" />}
                            </div>
                            <div className="SubscriptionModalDescriptionPlanOptionDetails">
                                <div className="SubscriptionModalDescriptionPlanOptionTitle">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</div>
                                <div className="SubscriptionModalDescriptionPlanOptionPrice">250 ‚ÇΩ –≤ –º–µ—Å—è—Ü</div>
                            </div>
                        </div>
                        {!user && (
                            <div className="SubscriptionModalRegistrationBlock">
                                <div className="SubscriptionModalRegistrationTitle">–ù–∞ –ø–æ—á—Ç—É –ø—Ä–∏–¥—É—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞</div>
                                <input className="SubscriptionModalRegistrationInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email" onChange={(e: any) => setEmail(e.target.value)}></input>
                            </div>
                        )}
                        </div>
                    </div>
                    <div className="SubscriptionModalFeature">
                        <div className="SubscriptionModalFeatureIcon">üéÆ</div>
                        <div className="SubscriptionModalFeatureContent">
                            <div className="SubscriptionModalFeatureTitleLine">
                                <span className="SubscriptionModalFeatureTitle">–î–æ—Å—Ç—É–ø –∫ –¥–æ—Ä–æ–≥–∏–º –∏–≥—Ä–∞–º</span>
                                <span className="SubscriptionModalFeatureBadge">–û–°–ù–û–í–ù–û–ï</span>
                            </div>
                            <div className="SubscriptionModalFeatureDescription">–í—Å–µ–≥–æ –ª–∏—à—å –∑–∞ {selected == 'month' ? '250' : '1 500'}‚ÄØ‚ÇΩ –≤ {selected == 'month' ? '–º–µ—Å—è—Ü' : '–≥–æ–¥'} –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –∏–≥—Ä –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Steam.</div>
                        </div>
                    </div>
                    <div className="SubscriptionModalFooter">
                        <div className="SubscriptionModalConnectRules">–û—Ñ–æ—Ä–º–ª—è—è –ø–æ–¥–ø–∏—Å–∫—É GODZILLA SOFT, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ <a className="SubscriptionModalConnectRuleLink">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</a> –∏ <a className="SubscriptionModalConnectRuleLink">–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>.</div>
                        <div className="SubscriptionModalConnectButton" onClick={onSubscribe}>
                        {isLoading && (
                            <span className="SubscriptionModalConnectButtonLoader"></span>
                        )}
                        {!isLoading && (
                            <span>–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞ {selected == 'month' ? '250' : '1 500'}‚ÄØ‚ÇΩ –≤ {selected == 'month' ? '–º–µ—Å—è—Ü' : '–≥–æ–¥'}</span>
                        )}</div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default SubscriptionModal;